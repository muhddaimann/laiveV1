
/**
 * @file costEstimator.ts
 * @description A module to estimate the cost of an AI voice interview session.
 */

/**
 * Defines the structure for the usage data required to calculate the cost.
 * @interface UsageData
 * @property {number} [inputTokens=0] - The number of input tokens used by the GPT model.
 * @property {number} [outputTokens=0] - The number of output tokens generated by the GPT model.
 * @property {number} [audioInputDuration=0] - The duration of the audio input in seconds.
 */
export interface UsageData {
  inputTokens?: number;
  outputTokens?: number;
  audioInputDuration?: number; // in seconds
}

/**
 * Defines the structure for the cost calculation result.
 * @interface CostResult
 * @property {number} gptInputCostUSD - The cost of GPT input tokens in USD.
 * @property {number} gptOutputCostUSD - The cost of GPT output tokens in USD.
 * @property {number} whisperCostUSD - The cost of Whisper transcription in USD.
 * @property {number} totalCostUSD - The total cost of the session in USD, rounded to 4 decimal places.
 * @property {number} totalCostMYR - The total cost of the session in MYR.
 * @property {number} usdToMyrRate - The conversion rate used from USD to MYR.
 */
export interface CostResult {
  gptInputCostUSD: number;
  gptOutputCostUSD: number;
  whisperCostUSD: number;
  totalCostUSD: number;
  totalCostMYR: number;
  usdToMyrRate: number;
}

// --- Pricing Constants ---
const GPT_INPUT_RATE = 0.005 / 1000; // $0.005 per 1K tokens
const GPT_OUTPUT_RATE = 0.015 / 1000; // $0.015 per 1K tokens
const WHISPER_RATE_PER_MINUTE = 0.006; // $0.006 per minute
const USD_TO_MYR_RATE = 4.7;

/**
 * Calculates the estimated cost of an AI interview session based on token usage and audio duration.
 *
 * @param {UsageData} usage - The usage data for the session.
 * @returns {CostResult} An object containing the detailed cost breakdown.
 */
export function calculateInterviewCost(usage: UsageData): CostResult {
  // Use fallback default values (0) for any missing input
  const inputTokens = usage.inputTokens || 0;
  const outputTokens = usage.outputTokens || 0;
  const audioInputDuration = usage.audioInputDuration || 0;

  // Calculate cost for each component
  const gptInputCostUSD = inputTokens * GPT_INPUT_RATE;
  const gptOutputCostUSD = outputTokens * GPT_OUTPUT_RATE;
  const whisperCostUSD = (audioInputDuration / 60) * WHISPER_RATE_PER_MINUTE;

  // Calculate total cost in USD
  const totalCostUSD = gptInputCostUSD + gptOutputCostUSD + whisperCostUSD;

  // Convert to MYR
  const totalCostMYR = totalCostUSD * USD_TO_MYR_RATE;

  return {
    gptInputCostUSD,
    gptOutputCostUSD,
    whisperCostUSD,
    totalCostUSD: parseFloat(totalCostUSD.toFixed(4)), // Rounded to 4 decimal places
    totalCostMYR,
    usdToMyrRate: USD_TO_MYR_RATE,
  };
}
